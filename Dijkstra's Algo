import heapq

def dijkstra(graph, start):
    # Initialize distance dictionary, set all distances to infinity except start node
    dist = {node: float('inf') for node in graph}
    dist[start] = 0
    
    # Priority queue (min-heap), initialized with the start node
    priority_queue = [(0, start)]  # (distance, node)
    
    # Predecessor dictionary to store the shortest path (optional, for path reconstruction)
    pred = {node: None for node in graph}
    
    while priority_queue:
        # Get the node with the smallest distance
        current_dist, current_node = heapq.heappop(priority_queue)
        
        # Skip this node if we've already found a better path
        if current_dist > dist[current_node]:
            continue
        
        # Explore neighbors of the current node
        for neighbor, weight in graph[current_node]:
            distance = current_dist + weight
            
            # If a shorter path to the neighbor is found
            if distance < dist[neighbor]:
                dist[neighbor] = distance
                pred[neighbor] = current_node  # Track path (optional)
                heapq.heappush(priority_queue, (distance, neighbor))
    
    return dist, pred  # Return distances and predecessors

# Example graph (adjacency list representation)
graph = {
    1: [(2, 4), (3, 2)],  # Node 1 is connected to node 2 with weight 4, node 3 with weight 2
    2: [(1, 4), (3, 1), (4, 3)],  # Node 2 is connected to nodes 1, 3, 4
    3: [(1, 2), (2, 1), (4, 2)],  # Node 3 is connected to nodes 1, 2, 4
    4: [(2, 3), (3, 2)]  # Node 4 is connected to nodes 2, 3
}

# Run Dijkstra's algorithm from node 1
distances, predecessors = dijkstra(graph, 1)

# Output shortest distances from node 1 to all other nodes
print("Shortest distances from node 1:", distances)
