from collections import defaultdict
import heapq

def adjList(edges):
    graph=defaultdict(list)
    for u,v,w in edges:
        graph[u].append([w,v])
        #graph[v].append([w,u])
    return graph

#create Min Heap
def PriorityQueue(graph):
    for key,val in graph.items():
        heapq.heapify(val)
    return graph



def Dijkstras(graph,V,source):
    visited=[source]
    queue=[source]
    shortestpath=defaultdict()
    for i in range(V):
        shortestpath[i]=99999999
    shortestpath[source]=0
    
    while queue:
        u=queue.pop(0)
        for w,v in graph[u]:
            if shortestpath[u]+w<shortestpath[v]:
                shortestpath[v]=shortestpath[u]+w
                if v not in visited:
                    queue.append(v)
                    visited.append(v)
    
    return shortestpath
    

            
edges=[[0,1,1],
       [0,2,4],
       [1,2,4],
       [1,3,6],
       [2,3,1]
       ]

graph=adjList(edges)

#print(graph)
graph=PriorityQueue(graph)
#print(graph)
print(Dijkstras(graph,4,0))

